byte A[]={B1111110,B0001001,B0001001,B0001001,B1111110};// écrire tous les caractères sous forme d’une matrice binaires . 
byte B[]={B1111111,B1001001,B1001001,B1001001,B0111110};
byte C[]={B0111110,B1000001,B1000001,B1000001,B0100010};
byte D[]={B1111111,B1000001,B1000001,B1000001,B0111110};
byte E[]={B1111111,B1001001,B1001001,B1001001,B1001001};
byte F[]={B1111111,B0001001,B0001001,B0001001,B0001001};
byte G[]={B0111110,B1000001,B1001001,B1001001,B0111010};
byte H[]={B1111111,B0001000,B0001000,B0001000,B1111111};
byte I[]={B0000000,B0000000,B1111111,B0000000,B0000000};
byte J[]={B0000000,B0110000,B1000000,B0111111,B0000000};
byte K[]={B1111111,B0001000,B0010100,B0100010,B1000001};
byte L[]={B1111111,B1000000,B1000000,B1000000,B1000000};
byte M[]={B1111111,B0000010,B0001100,B0000010,B1111111};
byte N[]={B1111111,B0000100,B0001000,B0010000,B1111111};
byte O[]={B0111110,B1000001,B1000001,B1000001,B0111110};
byte P[]={B1111111,B0001001,B0001001,B0001001,B0000110};
byte Q[]={B0111110,B1000001,B1010001,B0100001,B1011110};
byte R[]={B1111111,B0001001,B0011001,B0101001,B1000110};
byte S[]={B0100110,B1001001,B1001001,B1001001,B0110010};
byte T[]={B0000001,B0000001,B1111111,B0000001,B0000001};
byte U[]={B0111111,B1000000,B1000000,B1000000,B0111111};
byte V[]={B0011111,B0100000,B1000000,B0100000,B0011111};
byte W[]={B0111111,B1000000,B0110000,B1000000,B0111111};
byte X[]={B1100011,B0010100,B0001000,B0010100,B1100011};
byte Y[]={B0000111,B0001000,B1110000,B0001000,B0000111};
byte Z[]={B1100001,B1010001,B1001001,B1000101,B1000011};
byte n0[]={B0111110,B1010001,B1001001,B1000101,B011111};
byte n1[]={B0000000,B0000010,B0000010,B1111111,B0000000};
byte n2[]={B1000010,B1100001,B1010001,B1001001,B1000110};
byte n3[]={B0100010,B1001001,B1001001,B1001001,B0110110};
byte n4[]={B0011000,B0010100,B0010010,B1111111,B0010000};
byte n5[]={B1001111,B1001001,B1001001,B1001001,B0110001};
byte n6[]={B0111110,B1001001,B1001001,B1001001,B0110010};
byte n7[]={B0000001,B0000001,B1110001,B0001001,B0000111};
byte n8[]={B0110110,B1001001,B1001001,B1001001,B0110110};
byte n9[]={B0100110,B1001001,B1001001,B1001001,B0111110};
byte Dot[]={B0000000,B0000000,B1000000,B0000000,B0000000};
byte Semicolon[]={B0000000,B1000000,B0110000,B0000000,B0000000};
byte Tpoints[]={B0000000,B0000000,B0100010,B0000000,B0000000};
byte Minus[]={B0001000,B0001000,B0001000,B0001000,B0001000};
byte Plus[]={B0001000,B0001000,B0111110,B0001000,B0001000};
byte Space[]={B0000000,B0000000,B0000000,B0000000,B0000000};
byte Slash[]={B010000,B0010000,B0001000,B0000100,B000010};
byte PrtsL[]={B0011100,B0100010,B1000001,B0000000,B0000000};
byte PrtsR[] ={B0000000,B0000000,B1000001,B0100010,B0011100};
byte Qst[] ={B000010,B0000001,B1010001,B0001001,B0000110};
byte Intr[] ={B0000000,B0000000,B1011111,B0000000,B0000000};
byte Undrsc[] ={B1000000,B1000000,B1000000,B1000000,B1000000};
byte Eql[] ={B0010100,B0010100,B0010100,B0010100,B0010100};
byte Epst_s[]={B0000000,B1000000,B0111110,B0000001,B0000000};// le S du logo de EPST
byte TSCl[]={B1101100,B1000100,B0010000,B1000010,B1100110};//le logo du Tech-Squad club

int pins[]={2,3,4,5,6,7,8};// initialiser les pins qu’on va utiliser. 

int Ln=7;// nombre de ligne.  
int Cl=5;// nombre de colonne. 
int tmp1=370;// le temps séparent l’affichage des colonnes .   
int tmp2=1200;// le temps séparent l’affichage des caractères.
void setup() {
int i;
for (i=0;i<7;i++) pinMode(pins[i],OUTPUT);//initialisation des pins comme des output.
             }
void Afficher (byte* X){//créer une fonction qui lit et affiche les caractères.  
  int i,j;
  for(i=Cl-1;i>=0;i--){//pour chaque colonne répéter l’opération. 
    for(j=0;j<Ln;j++){//pour chaque ligne répéter l’opération.
      digitalWrite(pins[j],bitRead(X[i],j));//allumer les LEDs de la i-ème ligne ,j-éme colonne.                                              
       }
      delayMicroseconds (tmp1);//arrêter l’exécution pendant 370µs
     }
  for(i=0;i<7;i++){
     digitalWrite(pins[i],LOW);//éteindre les LEDs .
     }
}
void loop() { //afficher ‘EPST’ .
Afficher(T);
          delayMicroseconds(tmp2);
Afficher(S);
   delayMicroseconds(tmp2);
Afficher(P);
   delayMicroseconds(tmp2);
Afficher(E);
   delayMicroseconds(7*tmp2);//créer un espace entre les deux .
}



